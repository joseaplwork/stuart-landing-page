@import "variables.scss";

// Svg, common, retina background
$image-path: '../img' !default;
$fallback-extension: 'png' !default;
$retina-suffix: '@2x';

@mixin background-image($name, $ext: $fallback-extension, $size:false){
    background-repeat: no-repeat; 
    @if($ext == 'png'){
        background-image: url(#{$image-path}/#{$name}.svg);
    }
    @if($size){
        background-size: $size;
    }
    &.no-svg {
        background-image: url(#{$image-path}/#{$name}.#{$ext});

        @media only screen and (-moz-min-device-pixel-ratio: 1.5), only screen and (-o-min-device-pixel-ratio: 3/2), only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-device-pixel-ratio: 1.5) {
          background-image: url(#{$image-path}/#{$name}#{$retina-suffix}.#{$ext});
        }
    }
}

// Media queries

@mixin desktop {
  @media screen and (min-width: #{$desktop-width}) {
    @content;
  }
}

// Button

$text-desktop: $font-size * $incremental-s;

@mixin button-bg($bg) {
  background: $bg;
  vertical-align: middle;
  display: inline-block;
  position: relative;
  outline: none;
  border: none;
  line-height: 1.3;
  color: white;
  font-size: $font-size;
  padding: ($font-size * 0.3) ($font-size * 1);
  border-radius: 4px;
  font-weight: lighter;
  text-align: center;
  text-decoration: none;
  
  &:hover {
    background: darken($bg,8%);
    transition: all 0.3s ease;
    text-decoration: none;
  }
  &:active {
    background: darken($bg, 25%);
    text-decoration: none;
  }
  
  &.ps { font-size: $font-size + 1;padding: ($font-size * 0.3) ($font-size * 1.5) }
  &.pm { font-size: $font-size + 1;padding: ($font-size * 0.5) ($font-size * 2) }
  &.pl { font-size: $font-size + 2;padding: ($font-size * 0.7) ($font-size * 2.5) }
  &.px { font-size: $font-size + 2;padding: ($font-size * 0.8) ($font-size * 3) }

  /* Media query */
  @include desktop {
    font-size: $text-desktop;

    &.ps { font-size: $text-desktop + 1;padding: ($text-desktop * 0.5) ($text-desktop * 4) }
    &.pm { font-size: $text-desktop + 1;padding: ($text-desktop * 0.7) ($text-desktop * 5) }
    &.pl { font-size: $text-desktop + 2;padding: ($text-desktop * 0.9) ($text-desktop * 6) }
    &.px { font-size: $text-desktop + 2;padding: ($text-desktop * 1.1) ($text-desktop * 7) }
  }
}

//CSS3 Transition 
@mixin transition($transition-property, $transition-time: .3s, $method: linear,$transition-delay: 0s) {
    -webkit-transition: $transition-property $transition-time $method $transition-delay; 
    -moz-transition: $transition-property $transition-time $method $transition-delay; 
    -ms-transition: $transition-property $transition-time $method $transition-delay; 
    -o-transition: $transition-property $transition-time $method $transition-delay; 
    transition: $transition-property $transition-time $method $transition-delay; 
}

//CSS3 Transform: translate
@mixin transform-translate($x: null, $y: null){
    @if($x != null){
        -webkit-transform: translateX($x);
        -moz-transform   : translateX($x);
        -o-transform     : translateX($x);
        -ms-transform    : translateX($x);
        transform        : translateX($x);
    }
    @if($y != null){
        -webkit-transform: translateY($y);
        -moz-transform   : translateY($y);
        -o-transform     : translateY($y);
        -ms-transform    : translateY($y);
        transform        : translateY($y);
    }
}

//CSS3 Transform: rotate
@mixin transform-rotate($val){
    @if($val != null){
        -webkit-transform: rotate($val + deg) ;
        -moz-transform   : rotate($val + deg) ;
        -o-transform     : rotate($val + deg) ;
        -ms-transform    : rotate($val + deg) ;
        transform        : rotate($val + deg) ;
    }
}

//CSS3 Transform: translate
@mixin transform($rule: null){
    @if($rule != null){
        -webkit-transform: #{$rule};
        -moz-transform   : #{$rule};
        -o-transform     : #{$rule};
        -ms-transform    : #{$rule};
        transform        : #{$rule};
    }
}